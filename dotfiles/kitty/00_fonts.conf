################################################################################
##  Fonts                                                                     ##
################################################################################

# You can specify different fonts for the bold/italic/bold-italicvariants.
# To get a full list of supported fonts use the kitty list-fonts command.
# By default they are derived automatically, by the OSes font system.
font_family      Hack
bold_font        Hack Bold
italic_font      Hack Italic
bold_italic_font Hack Bold Italic

# Font size (in pts)
font_size 11.0

# Kitty does not support BIDI (bidirectional text), however, for RTL scripts,
# words are automatically displayed in RTL. That is to say, in an RTL script,
# the words “HELLO WORLD” display in kitty as “WORLD HELLO”, and if you try to
# select a substring of an RTL-shaped string, you will get the character that
# would be there had the the string been LTR. For example, assuming the Hebrew
# word ירושלים, selecting the character that on the screen appears to be ם
# actually writes into the selection buffer the character י.
# Kitty’s default behavior is useful in conjunction with a filter to reverse
# the word order, however, if you wish to manipulate RTL glyphs, it can be very
# challenging to work with, so this option is provided to turn it off.
# Furthermore, this option can be used with the command line program GNU FriBidi
# to get BIDI support, because it will force kitty to always treat the text as
# LTR, which FriBidi expects for terminals.
force_ltr no

# Change the size of each character cell kitty renders. You can use either
# numbers, which are interpreted as pixels or percentages (number followed by
# %), which are interpreted as percentages of the unmodified values. You can use
# negative pixels or percentages less than 100% to reduce sizes (but this might
# cause rendering artifacts).
adjust_line_height  0
adjust_column_width 0

# Choose how you want to handle multi-character ligatures. The default is to
# always render them. You can tell kitty to not render them when the cursor is
# over them by using cursor to make editing easier, or have kitty never render
# them at all by using always, if you don’t like them.
disable_ligatures never

# Choose exactly which OpenType features to enable or disable. This is useful as
# some fonts might have features worthwhile in a terminal. For example, Fira
# Code
# Retina includes a discretionary feature, zero, which in that font changes the
# appearance of the zero (0), to make it more easily distinguishable from Ø.
# Fira Code Retina also includes other discretionary features known as Stylistic
# Sets which have the tags ss01 through ss20.
# Note that this code is indexed by PostScript name, and not the font family.
# This allows you to define very precise feature settings;
# e.g. you can disable a feature in the italic font but not in the regular font.
font_features none

# Enable alternate zero and oldstyle numerals:
#font_features FiraCode-Retina +zero +onum

# Enable only alternate zero:
#font_features FiraCode-Retina +zero

# Disable the normal ligatures, but keep the calt feature which (in this font)
# breaks up monotony:
#font_features TT2020StyleB-Regular -liga +calt

# In conjunction with force_ltr, you may want to disable Arabic shaping
# entirely, and only look at their isolated forms if they show up in a document.
# You can do this with e.g.:
#font_features UnifontMedium +isol -medi -fina -init

# Change the sizes of the lines used for the box drawing unicode characters
# These values are in pts. They will be scaled by the monitor DPI to arrive at a
# pixel value.
# There must be four values corresponding to thin, normal, thick, and very thick
# lines.
box_drawing_scale 0.001, 1, 1.5, 2
